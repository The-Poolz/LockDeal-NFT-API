using System.Numerics;
using Flurl.Http.Testing;
using MetaDataAPI.Storage;
using Newtonsoft.Json.Linq;
using Nethereum.Hex.HexTypes;
using Nethereum.Model;
using System.Text;

namespace MetaDataAPI.Tests.Helpers;

internal static class HttpMock
{
    internal static string RpcUrl => "https://localhost:5050";

    internal static string DealMetadata => "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000006b31be09cf4e2da92f130b1056717fea06176ced000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000006063fba0fbd645d648c129854cce45a70dd8969100000000000000000000000043d81a2cf49238484d6960de1df9d430c81cdffc00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000002b5e3af16b1880000";
    internal static string LockMetadata => "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000b9fd557c192939a3889080954d52c64eba8e9be300000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d40e523bcb4230ffa1126e301f4ca0294b8cf18000000000000000000000000043d81a2cf49238484d6960de1df9d430c81cdffc00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064f878b2";
    internal static string TimedMetadata => "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000724a076a45ee73544685d4a9fc2240b1c635711e00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d40e523bcb4230ffa1126e301f4ca0294b8cf18000000000000000000000000043d81a2cf49238484d6960de1df9d430c81cdffc00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064f87a890000000000000000000000000000000000000000000000000000000064f87a89000000000000000000000000000000000000000000000002b5e3af16b1880000";
    internal static string CollateralMetadata => "0x000000000000000000000000db65ce03690e7044ac12f5e2ab640e7a355e9407000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000006063fba0fbd645d648c129854cce45a70dd8969100000000000000000000000066134461c865f824d294d8ca0d9080cc1acd05f600000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000003e80000000000000000000000000000000000000000000000000000000064c13b86";
    internal static string RefundMetadata => "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000007254a337d05d3965d7d3d8c1a94cd1cfcd1b00d6000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000007254a337d05d3965d7d3d8c1a94cd1cfcd1b00d600000000000000000000000043d81a2cf49238484d6960de1df9d430c81cdffc00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000002b5e3af16b1880000";
    internal static string BundleMetadata => "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000070decfd5e51c59ebdc8aca96bf22da6aff00b176000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000000000000000000000000000006063fba0fbd645d648c129854cce45a70dd8969100000000000000000000000043d81a2cf49238484d6960de1df9d430c81cdffc00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000061a80000000000000000000000000000000000000000000000000000000000000016";
    internal static string DecimalsRequest => "{\"jsonrpc\":\"2.0\",\"method\":\"eth_call\",\"params\":[{\"to\":\"0x66134461c865f824d294d8ca0d9080cc1acd05f6\",\"data\":\"0x313ce567\"},\"latest\"],\"id\":0}";
    internal static string GetRequest(string to,string data) => $"{{\"jsonrpc\":\"2.0\",\"method\":\"eth_call\",\"params\":[{{\"to\":\"{to}\",\"data\":\"{data}\"}},\"latest\"],\"id\":0}}";
    internal static string DecimalsResponse => CreateRpcResponse("0x12");
    internal static string DealResponse => CreateRpcResponse(DealMetadata);
    internal static string LockResponse => CreateRpcResponse(LockMetadata);
    internal static string TimedResponse => CreateRpcResponse(TimedMetadata);
    internal static string CollateralResponse => CreateRpcResponse(CollateralMetadata);

    private static string CreateRpcResponse(string result) => new JObject
    {
        { "result", result }
    }.ToString();

    public static HttpTestSetup SetupRpcCall(this HttpTest httpTest, BigInteger poolId, string response)
    {
        var data = MethodSignatures.GetData + new HexBigInteger(poolId).HexValue[2..].PadLeft(64, '0');
        var address = "0x57e0433551460e85dfc5a5ddaff4db199d0f960a";
        httpTest
            .ForCallsTo(RpcUrl)
            .WithRequestBody(GetRequest(address, data))
            .RespondWith(response);
        return httpTest;
    }

    public static HttpTestSetup SetupDecimals(this HttpTest httpTest, string address ,string response)
    {
        httpTest
            .ForCallsTo(RpcUrl)
            .WithRequestBody(GetRequest(address,MethodSignatures.Decimals))
            .RespondWith(response);
        return httpTest;
    }   

    public static HttpTestSetup SetupName(this HttpTest httpTest, string address, string response)
    {
        httpTest.ForCallsTo(RpcUrl)
            .WithRequestBody(GetRequest(address,MethodSignatures.Name))
            .RespondWith(ToHex(response));
        return httpTest;
    }
    public static HttpTestSetup SetupSymbol(this HttpTest httpTest, string address, string response)
    {
        httpTest.ForCallsTo(RpcUrl)
            .WithRequestBody(GetRequest(address,MethodSignatures.Symbol))
            .RespondWith(ToHex(response));
        return httpTest;
    }
    public static string ToHex(string text)
    {
        byte[] ba = Encoding.Default.GetBytes(text);
        var hexString = BitConverter.ToString(ba);
        return "0x" + hexString.Replace("-", "");
    }
}